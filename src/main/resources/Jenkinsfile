pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-2'
        ECR_REPO = 'sleep-dev'
        GITHUB_REPO = 'https://github.com/Hughqj/sleep-dev.git'
        AWS_ACCOUNT_ID = '305090498954'
        ECS_CLUSTER = 'sleep-dev-ecs-v3'
        ECS_SERVICE = 'sleep-dev'
        ECS_TASK_DEFINITION = 'sleep-fargate:11'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: env.GITHUB_REPO
            }
        }

        stage('Build') {
            steps {
                sh 'mvn clean package'
            }
        }

        stage('Get Version') {
            steps {
                script {
                    // 读取 Maven 项目的版本号
                    def version = sh(
                        script: "mvn help:evaluate -Dexpression=project.version -q -DforceStdout",
                        returnStdout: true
                    ).trim()
                    env.APP_VERSION = version

                    // 获取当前时间戳
                    def timestamp = sh(
                        script: "date +%Y%m%d%H%M%S",
                        returnStdout: true
                    ).trim()
                    env.VERSION_TAG = "${env.APP_VERSION}-${timestamp}"

                    echo "Project version: ${env.APP_VERSION}"
                    echo "Version tag: ${env.VERSION_TAG}"
                }
            }
        }

        stage('Update Dockerfile') {
            steps {
                script {
                    // 更新 Dockerfile 中的 JAR 文件名
                    sh """
                    sed -i 's|sleep-dev-.*-SNAPSHOT.jar|sleep-dev-${env.APP_VERSION}.jar|' Dockerfile
                    """
                }
            }
        }

        stage('Build Image') {
            steps {
                script {
                    // 使用 Docker 构建镜像，并添加版本标签
                    sh 'docker build -t $ECR_REPO:$VERSION_TAG .'
                }
            }
        }

        stage('Push to ECR') {
            steps {
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                        sh '''
                        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
                        docker tag $ECR_REPO:$VERSION_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:$VERSION_TAG
                        docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:$VERSION_TAG
                        '''
                    }
                }
            }
        }

        stage('Deploy to ECS') {
            steps {
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                        sh '''
                        set -e

                        # 获取当前任务定义
                        TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION | jq '.taskDefinition')

                        # 提取容器定义并更新镜像版本
                        CONTAINER_DEFINITIONS=$(echo $TASK_DEFINITION | jq --arg IMAGE "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:$VERSION_TAG" '.containerDefinitions | map(if .name == "sleep-app" then .image = $IMAGE else . end)')

                        # 提取 taskRoleArn 和 executionRoleArn，确保它们不为空
                        TASK_ROLE_ARN=$(echo $TASK_DEFINITION | jq -r '.taskRoleArn // empty')
                        EXECUTION_ROLE_ARN=$(echo $TASK_DEFINITION | jq -r '.executionRoleArn // empty')

                        # 构建新的任务定义
                        NEW_TASK_DEFINITION=$(jq -n \
                        --arg family "$(echo $TASK_DEFINITION | jq -r '.family')" \
                        --argjson containerDefinitions "$CONTAINER_DEFINITIONS" \
                        --argjson volumes "$(echo $TASK_DEFINITION | jq '.volumes')" \
                        --arg taskRoleArn "$TASK_ROLE_ARN" \
                        --arg executionRoleArn "$EXECUTION_ROLE_ARN" \
                        --arg networkMode "$(echo $TASK_DEFINITION | jq -r '.networkMode')" \
                        --argjson requiresCompatibilities "$(echo $TASK_DEFINITION | jq '.requiresCompatibilities')" \
                        --arg cpu "$(echo $TASK_DEFINITION | jq -r '.cpu')" \
                        --arg memory "$(echo $TASK_DEFINITION | jq -r '.memory')" \
                        '{
                            family: $family,
                            containerDefinitions: $containerDefinitions,
                            volumes: $volumes,
                            taskRoleArn: $taskRoleArn,
                            executionRoleArn: $executionRoleArn,
                            networkMode: $networkMode,
                            requiresCompatibilities: $requiresCompatibilities,
                            cpu: $cpu,
                            memory: $memory
                        } | del(.taskRoleArn | select(. == "")) | del(.executionRoleArn | select(. == ""))')

                        # 注册新的任务定义
                        aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEFINITION"

                        # 更新 ECS 服务以使用新的任务定义
                        aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment
                        '''
                    }
                }
            }
        }
    }
}