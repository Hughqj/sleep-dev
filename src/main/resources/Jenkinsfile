pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-2'
        ECR_REPO = 'sleep-dev'
        EKS_CLUSTER = 'sleep-dev-v1'
        GITHUB_REPO = 'https://github.com/Hughqj/sleep-dev.git'
        AWS_ACCOUNT_ID = '305090498954'
        EKS_NAMESPACE = 'dev'
        KUBECTL_PATH = '/root/bin/kubectl'  // 使用 kubectl 的绝对路径
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: env.GITHUB_REPO
            }
        }

        stage('Build') {
            steps {
                sh 'mvn clean package'
            }
        }

        stage('Get Version') {
            steps {
                script {
                    // 读取 Maven 项目的版本号
                    def version = sh(
                        script: "mvn help:evaluate -Dexpression=project.version -q -DforceStdout",
                        returnStdout: true
                    ).trim()
                    env.APP_VERSION = version

                    // 获取当前时间戳
                    def timestamp = sh(
                        script: "date +%Y%m%d%H%M%S",
                        returnStdout: true
                    ).trim()
                    env.VERSION_TAG = "${env.APP_VERSION}-${timestamp}"

                    echo "Project version: ${env.APP_VERSION}"
                    echo "Version tag: ${env.VERSION_TAG}"
                }
            }
        }

        stage('Update Dockerfile') {
            steps {
                script {
                    // 更新 Dockerfile 中的 JAR 文件名
                    sh """
                    sed -i 's|sleep-dev-.*-SNAPSHOT.jar|sleep-dev-${env.APP_VERSION}.jar|' Dockerfile
                    """
                }
            }
        }

        stage('Build Image') {
            steps {
                script {
                    // 使用 Docker 构建镜像，并添加版本标签
                    sh 'docker build -t $ECR_REPO:$VERSION_TAG .'
                }
            }
        }

        stage('Push to ECR') {
            steps {
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                        sh '''
                        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
                        docker tag $ECR_REPO:$VERSION_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:$VERSION_TAG
                        docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:$VERSION_TAG
                        '''
                    }
                }
            }
        }

        stage('Deploy to EKS') {
            steps {
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                        sh '''
                        aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER
                        $KUBECTL_PATH set image deployment/sleep sleep=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:$VERSION_TAG -n $EKS_NAMESPACE
                        $KUBECTL_PATH rollout status deployment/sleep -n $EKS_NAMESPACE
                        '''
                    }
                }
            }
        }
    }
}